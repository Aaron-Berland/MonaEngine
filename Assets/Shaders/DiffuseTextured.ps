#version 450 core 
layout (location = 3) uniform sampler2D diffuseTexture;
layout (location = 4) uniform vec3 materialTint;
out vec4 color;

in vec3 normal;
in vec3 worldPos;
in vec2 texCoord;

struct DirectionalLight {
	vec3 colorIntensity;
	vec3 direction;
};

struct PointLight {
	vec3 colorIntensity;
	vec3 position;
	float maxRadius;
};

struct SpotLight {
	vec3 colorIntensity; 
	float maxRadius;
	vec3 position; 
	float cosPenumbraAngle;
	vec3 direction;
	float cosUmbraAngle;
};

layout(std140, binding = 0) uniform Lights {
	SpotLight[${MAX_SPOT_LIGHTS}] spotLights;
	PointLight[${MAX_POINT_LIGHTS}] pointLights;
	DirectionalLight[${MAX_DIRECTIONAL_LIGHTS}] directionalLights;
	vec3 ambientLight;
	int spotLightsCount;
	int pointLightsCount;
	int directionalLightsCount;
};

void main()
{
	vec3 ambient = ambientLight;
	vec3 norm = normalize(normal);
	vec3 Lo = vec3(0.0f,0.0f,0.0f);
	
	for(int i = 0; i < directionalLightsCount; i++){
		Lo += directionalLights[i].colorIntensity * max(dot(norm, -directionalLights[i].direction), 0.0);
	}
	
	for(int i = 0; i < pointLightsCount; i++){
		vec3 lightVector = worldPos - pointLights[i].position;
		vec3 lightDir = normalize(worldPos - pointLights[i].position);
		float squareDistance = dot(lightVector, lightVector);
		float squareRadius = pointLights[i].maxRadius * pointLights[i].maxRadius;
		float windowing = pow(max(1.0 - pow(squareDistance/squareRadius,2.0f),0.0f),2.0f);
		float distanceAttenuation = windowing * (1 / (squareDistance + 1));
		Lo += distanceAttenuation * pointLights[i].colorIntensity * max(dot(norm, -lightDir), 0.0);
	}

	for(int i = 0; i < spotLightsCount; i++){
		vec3 lightVector = worldPos - spotLights[i].position;
		vec3 lightDir = normalize(worldPos - spotLights[i].position);
		float squareDistance = dot(lightVector, lightVector);
		float squareRadius = spotLights[i].maxRadius * spotLights[i].maxRadius;
		float windowing = pow(max(1.0 - pow(squareDistance/squareRadius,2.0f),0.0f),2.0f);
		float distanceAttenuation = windowing * (1 / (squareDistance + 1));
		float cosSurfaceAngle = dot(spotLights[i].direction, lightDir); 
		float t = clamp((cosSurfaceAngle - spotLights[i].cosUmbraAngle) / (spotLights[i].cosPenumbraAngle - spotLights[i].cosUmbraAngle), 0.0f, 1.0f);
		float angularAttenuation = t*t;
		Lo += distanceAttenuation *  angularAttenuation * spotLights[i].colorIntensity * max(dot(norm, -lightDir), 0.0);
	}
	
	vec3 diffuseColor = texture(diffuseTexture, texCoord).xyz;
	vec3 result = (ambient + Lo) * diffuseColor;
	color = vec4(materialTint * result, 1.0);

}